{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Nweet.js","components/NweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Nweet","nweetObj","isOwner","editing","setEditing","text","newNweet","setNewNweet","onDeleteClick","ok","window","confirm","doc","id","delete","refFromURL","attachmentUrl","toggleEditing","e","update","autoFocus","src","faTrash","faPencilAlt","NweetFactory","userObj","nweet","setNweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","maxLength","for","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","Boolean","readAsDataURL","opacity","backgroundImage","faTimes","Home","nweets","setNweets","useEffect","orderBy","onSnapshot","snapshot","nweetArray","docs","map","marginTop","refreshUser","history","useHistory","displayName","newDisplayName","setNewDisplayName","updateProfile","signOut","push","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","AppRouter","isLoggedin","maxWidth","width","margin","exact","path","Profile","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAgBAA,IAASC,cAVc,CACrBC,OAAQC,0CACRC,WAAYD,gCACZE,UAAWF,gBACXG,cAAeH,4BACfI,kBAAmBJ,gBACnBK,MAAOL,+CAMF,IAAMM,EAAmBT,IACnBU,EAAcV,IAASW,OAKvBC,EAAYZ,IAASa,YACrBC,EAAiBd,IAASe,U,OC2DxBC,EAjFE,WACf,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAoCJ,oBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAA0BN,mBAAS,IAAnC,mBAAOO,EAAP,KAAcC,EAAd,KAEMC,EAAW,SAACC,GAChB,MAEIA,EADFC,OAAUC,EADZ,EACYA,KAAMC,EADlB,EACkBA,MAEL,UAATD,EACFV,EAASW,GACS,aAATD,GACTR,EAAYS,IAKVC,EAAQ,uCAAG,WAAOJ,GAAP,eAAAK,EAAA,yDACfL,EAAMM,iBADS,UASTX,EATS,gCAWEZ,EAAYwB,+BACvBhB,EACAE,GAbS,OAWXe,EAXW,+CAiBEzB,EAAY0B,2BAA2BlB,EAAOE,GAjBhD,QAiBXe,EAjBW,eAmBbE,QAAQC,IAAIH,GAnBC,kDAqBbV,EAAS,KAAMc,SArBF,0DAAH,sDA4Bd,OACE,qCACE,uBAAMR,SAAUA,EAAUS,UAAU,YAApC,UACE,uBACEX,KAAK,QACLY,KAAK,QACLC,YAAY,QACZC,UAAQ,EACRb,MAAOZ,EACPQ,SAAUA,EACVc,UAAU,cAEZ,uBACEX,KAAK,WACLY,KAAK,WACLC,YAAY,WACZC,UAAQ,EACRb,MAAOV,EACPM,SAAUA,EACVc,UAAU,cAEZ,uBACEC,KAAK,SACLD,UAAU,uBACVV,MAAOR,EAAa,iBAAmB,WAExCE,GAAS,sBAAMgB,UAAU,YAAhB,SAA6BhB,OAEzC,sBAAMoB,QA/BY,kBAAMrB,GAAc,SAACsB,GAAD,OAAWA,MA+BnBL,UAAU,aAAxC,SACGlB,EAAa,UAAY,uBChCnBwB,EApCF,WACX,IAAMC,EAAa,uCAAG,WAAOpB,GAAP,mBAAAK,EAAA,4DAKP,YAHDH,EACRF,EADFC,OAAUC,MAIVmB,EAAW,IAAIvC,EAAiBE,KAAKsC,mBACnB,WAATpB,IACTmB,EAAW,IAAIvC,EAAiBE,KAAKuC,oBARnB,SAUDxC,EAAYyC,gBAAgBH,GAV3B,OAUdb,EAVc,OAWpBE,QAAQC,IAAIH,GAXQ,2CAAH,sDAcnB,OACE,sBAAKK,UAAU,gBAAf,UACE,cAAC,IAAD,CACEY,KAAMC,IACNC,MAAO,UACPC,KAAK,KACLC,MAAO,CAAEC,aAAc,MAEzB,cAAC,EAAD,IACA,sBAAKjB,UAAU,WAAf,UACE,yBAAQI,QAASG,EAAelB,KAAK,SAASW,UAAU,UAAxD,kCACuB,cAAC,IAAD,CAAiBY,KAAMM,SAE9C,yBAAQd,QAASG,EAAelB,KAAK,SAASW,UAAU,UAAxD,kCACuB,cAAC,IAAD,CAAiBY,KAAMO,gB,gBCwCvCC,EA1ED,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QACzB,EAA8B7C,oBAAS,GAAvC,mBAAO8C,EAAP,KAAgBC,EAAhB,KAGA,EAAgC/C,mBAAS4C,EAASI,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAGMC,EAAa,uCAAG,4BAAApC,EAAA,yDACdqC,EAAKC,OAAOC,QAAQ,sCAC1BlC,QAAQC,IAAI+B,IACRA,EAHgB,gCAKZzD,EAAU4D,IAAV,iBAAwBX,EAASY,KAAMC,SAL3B,uBAMZ5D,EAAe6D,WAAWd,EAASe,eAAeF,SANtC,2CAAH,qDAUbG,EAAgB,kBAAMb,GAAW,SAACnB,GAAD,OAAWA,MAC5Cd,EAAQ,uCAAG,WAAO+C,GAAP,SAAA9C,EAAA,6DAEf8C,EAAE7C,iBAFa,SAITrB,EAAU4D,IAAV,iBAAwBX,EAASY,KAAMM,OAAO,CAClDd,KAAMC,IALO,OAOfF,GAAW,GAPI,2CAAH,sDAgBd,OACE,qBAAKxB,UAAU,QAAf,SACGuB,EACC,qCACE,uBAAMhC,SAAUA,EAAUS,UAAU,sBAApC,UACE,uBACEC,KAAK,OACLC,YAAY,kBACZZ,MAAOoC,EACPvB,UAAQ,EACRqC,WAAS,EACTtD,SAlBK,SAACoD,GAChB,IACYhD,EACRgD,EADFlD,OAAUE,MAEZqC,EAAYrC,IAeFU,UAAU,cAEZ,uBAAOC,KAAK,SAASX,MAAM,eAAeU,UAAU,eAEtD,sBAAMI,QAASiC,EAAerC,UAAU,oBAAxC,uBAKF,qCACE,+BAAKqB,EAASI,KAAd,OACCJ,EAASe,eAAiB,qBAAKK,IAAKpB,EAASe,gBAC7Cd,GACC,sBAAKtB,UAAU,iBAAf,UACE,sBAAMI,QAASwB,EAAf,SACE,cAAC,IAAD,CAAiBhB,KAAM8B,QAEzB,sBAAMtC,QAASiC,EAAf,SACE,cAAC,IAAD,CAAiBzB,KAAM+B,iB,QCsCxBC,EArGM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,EAA0BpE,mBAAS,IAAnC,mBAAOqE,EAAP,KAAcC,EAAd,KACA,EAAoCtE,mBAAS,IAA7C,mBAAOuE,EAAP,KAAmBC,EAAnB,KAEM1D,EAAQ,uCAAG,WAAOJ,GAAP,qBAAAK,EAAA,yDACfL,EAAMM,iBACQ,KAAVqD,EAFW,oDAMXV,EAAgB,GACD,KAAfY,EAPW,wBAQPE,EAAgB5E,EACnB6E,MACAC,MAFmB,UAEVP,EAAQQ,IAFE,YAEKC,gBAVd,SAWUJ,EAAcK,UAAUP,EAAY,YAX9C,cAWPQ,EAXO,iBAYSA,EAASL,IAAIM,iBAZtB,QAYbrB,EAZa,sBAcTf,EAAW,CACfI,KAAMqB,EACNY,UAAWC,KAAKC,MAChBC,UAAWhB,EAAQQ,IACnBjB,iBAlBa,UAqBThE,EAAU0F,WAAW,UAAUC,IAAI1C,GArB1B,QAsBf0B,EAAS,IACTE,EAAc,IAvBC,4CAAH,sDAqDd,OACE,uBAAM1D,SAAUA,EAAUS,UAAU,cAApC,UACE,sBAAKA,UAAU,0BAAf,UACE,uBACEA,UAAU,sBACVV,MAAOwD,EACP5D,SAlCS,SAACC,GAChB,IACYG,EACRH,EADFC,OAAUE,MAEZyD,EAASzD,IA+BHW,KAAK,OACLC,YAAY,uBACZ8D,UAAW,MAEb,uBAAO/D,KAAK,SAASX,MAAM,SAASU,UAAU,2BAEhD,wBAAOiE,IAAI,cAAcjE,UAAU,sBAAnC,UACE,8CACA,cAAC,IAAD,CAAiBY,KAAMsD,SAEzB,uBACEjC,GAAG,cACHhC,KAAK,OACLkE,OAAO,UACPjF,SAxCe,SAACoD,GACpB,IAGM8B,EADF9B,EADFlD,OAAUiF,MAEU,GAChBC,EAAS,IAAIC,WACnBD,EAAOE,UAAY,SAACC,GAClB,IACmBC,EACfD,EADFE,cAAiBD,OAEnBzB,EAAcyB,IAEZE,QAAQR,IACVE,EAAOO,cAAcT,IA4BnBpD,MAAO,CACL8D,QAAS,KAGZ9B,GACC,sBAAKhD,UAAU,0BAAf,UACE,qBACEyC,IAAKO,EACLhC,MAAO,CACL+D,gBAAiB/B,KAGrB,sBAAKhD,UAAU,qBAAqBI,QApClB,kBAAM6C,EAAc,OAoCtC,UACE,0CACA,cAAC,IAAD,CAAiBrC,KAAMoE,gBChBpBC,EA9EF,SAAC,GAAiB,IAAfpC,EAAc,EAAdA,QACd,EAA4BpE,mBAAS,IAArC,mBAAOyG,EAAP,KAAeC,EAAf,KA8DA,OAhBAC,qBAAU,WAERhH,EACG0F,WAAW,UACXuB,QAAQ,YAAa,QACrBC,YAAW,SAACC,GACX,IAAMC,EAAaD,EAASE,KAAKC,KAAI,SAAC1D,GAAD,oBACnCC,GAAID,EAAIC,IACLD,EAAIrC,WAITwF,EAAUK,QAEb,IAGD,sBAAKxF,UAAU,YAAf,UACE,cAAC,EAAD,CAAc6C,QAASA,IACvB,qBAAK7B,MAAO,CAAE2E,UAAW,IAAzB,SACGT,EAAOQ,KAAI,SAAC5C,GAAD,OACV,cAAC,EAAD,CAEEzB,SAAUyB,EACVxB,QAASwB,EAAMe,YAAchB,EAAQQ,KAFhCP,EAAMb,aCtER,cAA+B,IAA5BY,EAA2B,EAA3BA,QAAS+C,EAAkB,EAAlBA,YACnBC,EAAUC,cAChB,EAA4CrH,mBAASoE,EAAQkD,aAA7D,mBAAOC,EAAP,KAAuBC,EAAvB,KA8BM1G,EAAQ,uCAAG,WAAOJ,GAAP,SAAAK,EAAA,yDACfL,EAAMM,iBACFoD,EAAQkD,cAAgBC,EAFb,gCAGPnD,EAAQqD,cAAc,CAC1BH,YAAaC,IAJF,OAMbJ,IANa,2CAAH,sDAUd,OACE,sBAAK5F,UAAU,YAAf,UACE,uBAAMT,SAAUA,EAAUS,UAAU,cAApC,UACE,uBACEd,SArBS,SAACC,GAChB,IACYG,EACRH,EADFC,OAAUE,MAEZ2G,EAAkB3G,IAkBZW,KAAK,OACLuC,WAAS,EACTtC,YAAY,eACZZ,MAAO0G,EACPhG,UAAU,cAEZ,uBACEC,KAAK,SACLX,MAAM,iBACNU,UAAU,UACVgB,MAAO,CACL2E,UAAW,SAIjB,sBAAM3F,UAAU,2BAA2BI,QA3DzB,WACpBlC,EAAYiI,UACZN,EAAQO,KAAK,MAyDX,yBC3BSC,EAjCI,SAAC,GAAiB,IAAfxD,EAAc,EAAdA,QACpB,OACE,8BACE,qBAAI7B,MAAO,CAAEsF,QAAS,OAAQC,eAAgB,SAAUZ,UAAW,IAAnE,UACE,6BACE,cAAC,IAAD,CAAMa,GAAG,IAAIxF,MAAO,CAAEyF,YAAa,IAAnC,SACE,cAAC,IAAD,CAAiB7F,KAAMC,IAAWC,MAAO,UAAWC,KAAK,WAG7D,6BACE,eAAC,IAAD,CACEyF,GAAG,WACHxF,MAAO,CACL0F,WAAY,GACZJ,QAAS,OACTK,cAAe,SACfC,WAAY,SACZC,SAAU,IAPd,UAUE,cAAC,IAAD,CAAiBjG,KAAMkG,IAAQhG,MAAO,UAAWC,KAAK,OACtD,sBAAMC,MAAO,CAAE2E,UAAW,IAA1B,SACG9C,EAAQkD,YAAR,UACMlD,EAAQkD,YADd,cAEG,uBCkBHgB,EAzCG,SAAC,GAA0C,IAAxCnB,EAAuC,EAAvCA,YAAaoB,EAA0B,EAA1BA,WAAYnE,EAAc,EAAdA,QAC5C,OACE,eAAC,IAAD,WACGmE,GAAc,cAAC,EAAD,CAAYnE,QAASA,IAEpC,cAAC,IAAD,UAEGmE,EACC,sBACEhG,MAAO,CACLiG,SAAU,IACVC,MAAO,OACPC,OAAQ,SACRxB,UAAW,GACXW,QAAS,OACTC,eAAgB,UAPpB,UAUE,cAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,CAAMxE,QAASA,MAEjB,cAAC,IAAD,CAAOuE,OAAK,EAACC,KAAK,WAAlB,SACE,cAACC,EAAD,CAAS1B,YAAaA,EAAa/C,QAASA,SAKhD,mCACE,cAAC,IAAD,CAAOuE,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,cCsBCE,MAtDf,WACE,MAAwB9I,oBAAS,GAAjC,mBAAO+I,EAAP,KAAaC,EAAb,KAEA,EAA8BhJ,mBAAS,MAAvC,mBAAOoE,EAAP,KAAgB6E,EAAhB,KAmCA,OAlCAtC,qBAAU,WACRlH,EAAYyJ,oBAAmB,SAACC,GAI5BF,EAHEE,EAGS,CACT7B,YAAa6B,EAAK7B,YAClB1C,IAAKuE,EAAKvE,IACV6C,cAAe,SAAC2B,GAAD,OAAUD,EAAK1B,cAAc2B,KAGnC,MAEbJ,GAAQ,QAET,IAoBD,mCACGD,EACC,cAAC,EAAD,CACE5B,YArBY,WAElB/F,QAAQC,IAAI5B,EAAY4J,YAAY/B,aACpClG,QAAQC,IAAI5B,EAAY4J,aAGxB,IAAMF,EAAO1J,EAAY4J,YAIzBJ,EAAW,CACT3B,YAAa6B,EAAK7B,YAClB1C,IAAKuE,EAAKvE,IACV6C,cAAe,SAAC2B,GAAD,OAAUD,EAAK1B,cAAc2B,OASxCb,WAAYpC,QAAQ/B,GACpBA,QAASA,IAGX,qB,MC9CRkF,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.3284a4b0.chunk.js","sourcesContent":["// Firebase App (the core Firebase SDK) is always required and must be listed first\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\nexport const authService = firebase.auth();\r\n// const auth = fbase.auth(); // App.js에서 이렇게 해주거나 아님 fbase.js안에서 authService 변수를 만들어서 export해주거나\r\n// 여기다가 이렇게 하는 이유는, auth서비스를 많이 호출할 예정이어서.\r\n// 이렇게 하면 다른곳에서 authService를 이용할때마다 firebase.auth()를 호출해야하는데 여기서 호출해고 그걸 export해버리면 다른곳에서 import만 하면 되니까\r\n\r\nexport const dbService = firebase.firestore();\r\nexport const storageService = firebase.storage();\r\n","import { authService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst AuthForm = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [newAccount, setNewAccount] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { name, value },\r\n    } = event;\r\n    if (name === \"email\") {\r\n      setEmail(value);\r\n    } else if (name === \"password\") {\r\n      setPassword(value);\r\n    }\r\n    // 이렇게 하는 이유는 onChange를 두개 만들기 싫어서. - 이메일,패스워드 둘다 만들기 싫어서\r\n  };\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault(); // -> It means, let me handle that.\r\n    // 이걸 하는 이유는, Everytime submit a form using normal HTML, the website gets refreshed.\r\n    // and when it is refreshed all the react code goes away, all the state goes away\r\n    // 일반 html을 폼을 서브밋할때 새로고침되는데 - 그러면서 url뒤에 ?email=test&password=1234 이런식으로 뜨지.\r\n    // 이렇게 새로고침을 하면 리액트도 새로고침되고 코드가 다 날라감.\r\n\r\n    try {\r\n      let data;\r\n      if (newAccount) {\r\n        // create account\r\n        data = await authService.createUserWithEmailAndPassword(\r\n          email,\r\n          password\r\n        );\r\n      } else {\r\n        // log in\r\n        data = await authService.signInWithEmailAndPassword(email, password);\r\n      }\r\n      console.log(data);\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  const toggleAccount = () => setNewAccount((prev) => !prev);\r\n  // 이거 버튼처럼 만들어놓은건데 클릭하면 두개값이 그냥 계속 바뀌는거\r\n  // 이거에 따라서 <input type=\"submit\" value={newAccount ? \"Create Account\" : \"Log In\"} /> 이 값이 바뀐다. setNewAccount를 바꾸는 거니까.\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit} className=\"container\">\r\n        <input\r\n          name=\"email\"\r\n          type=\"email\"\r\n          placeholder=\"Email\"\r\n          required\r\n          value={email}\r\n          onChange={onChange}\r\n          className=\"authInput\"\r\n        />\r\n        <input\r\n          name=\"password\"\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          required\r\n          value={password}\r\n          onChange={onChange}\r\n          className=\"authInput\"\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          className=\"authInput authSubmit\"\r\n          value={newAccount ? \"Create Account\" : \"Log In\"}\r\n        />\r\n        {error && <span className=\"authError\">{error}</span>}\r\n      </form>\r\n      <span onClick={toggleAccount} className=\"authSwitch\">\r\n        {newAccount ? \"Sign in\" : \"Create Account\"}\r\n      </span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faTwitter,\r\n  faGoogle,\r\n  faGithub,\r\n} from \"@fortawesome/free-brands-svg-icons\";\r\nimport { authService, firebaseInstance } from \"fbase\";\r\nimport AuthForm from \"components/AuthForm\";\r\n\r\nconst Auth = () => {\r\n  const onSocialClick = async (event) => {\r\n    const {\r\n      target: { name },\r\n    } = event;\r\n    let provider;\r\n    if (name === \"google\") {\r\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n    } else if (name === \"github\") {\r\n      provider = new firebaseInstance.auth.GithubAuthProvider();\r\n    }\r\n    const data = await authService.signInWithPopup(provider);\r\n    console.log(data);\r\n  };\r\n\r\n  return (\r\n    <div className=\"authContainer\">\r\n      <FontAwesomeIcon\r\n        icon={faTwitter}\r\n        color={\"#04AAFF\"}\r\n        size=\"3x\"\r\n        style={{ marginBottom: 30 }}\r\n      />\r\n      <AuthForm />\r\n      <div className=\"authBtns\">\r\n        <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\r\n          Continue with Google <FontAwesomeIcon icon={faGoogle} />\r\n        </button>\r\n        <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\r\n          Continue with Github <FontAwesomeIcon icon={faGithub} />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n","import { dbService, storageService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Nweet = ({ nweetObj, isOwner }) => {\r\n  const [editing, setEditing] = useState(false);\r\n  // editing, setEditing -> these are telling that we are editing mode or not - true or false.\r\n\r\n  const [newNweet, setNewNweet] = useState(nweetObj.text);\r\n  // newNweet, setNewNweet -> these are to update the text of the input\r\n\r\n  const onDeleteClick = async () => {\r\n    const ok = window.confirm(\"Are you sure to delete this nweet?\");\r\n    console.log(ok);\r\n    if (ok) {\r\n      // delete nweet\r\n      await dbService.doc(`nweets/${nweetObj.id}`).delete();\r\n      await storageService.refFromURL(nweetObj.attachmentUrl).delete(); // refFromURL() 이거를 사용해서 url으로부터 ref를 가져오는거야.\r\n    }\r\n  };\r\n\r\n  const toggleEditing = () => setEditing((prev) => !prev);\r\n  const onSubmit = async (e) => {\r\n    // 사실 여기서 async는 필요가 없어 어떤 방법을 써도 snapshot 덕분에 업데이트는 확인할 수가 있어서\r\n    e.preventDefault();\r\n    // console.log(nweetObj, newNweet);\r\n    await dbService.doc(`nweets/${nweetObj.id}`).update({\r\n      text: newNweet,\r\n    });\r\n    setEditing(false);\r\n  };\r\n  const onChange = (e) => {\r\n    const {\r\n      target: { value },\r\n    } = e;\r\n    setNewNweet(value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"nweet\">\r\n      {editing ? (\r\n        <>\r\n          <form onSubmit={onSubmit} className=\"container nweetEdit\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Edit your Nweet\"\r\n              value={newNweet}\r\n              required\r\n              autoFocus\r\n              onChange={onChange}\r\n              className=\"formInput\"\r\n            />\r\n            <input type=\"submit\" value=\"Update Nweet\" className=\"formBtn\" />\r\n          </form>\r\n          <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\r\n            Cancel\r\n          </span>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h4>{nweetObj.text} </h4>\r\n          {nweetObj.attachmentUrl && <img src={nweetObj.attachmentUrl} />}\r\n          {isOwner && (\r\n            <div className=\"nweet__actions\">\r\n              <span onClick={onDeleteClick}>\r\n                <FontAwesomeIcon icon={faTrash} />\r\n              </span>\r\n              <span onClick={toggleEditing}>\r\n                <FontAwesomeIcon icon={faPencilAlt} />\r\n              </span>\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Nweet;\r\n","import { dbService, storageService } from \"fbase\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst NweetFactory = ({ userObj }) => {\r\n  const [nweet, setNweet] = useState(\"\"); // this state is only for the form.\r\n  const [attachment, setAttachment] = useState(\"\");\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (nweet === \"\") {\r\n      return;\r\n    }\r\n\r\n    let attachmentUrl = \"\";\r\n    if (attachment !== \"\") {\r\n      const attachmentRef = storageService\r\n        .ref()\r\n        .child(`${userObj.uid}/${uuidv4()}`);\r\n      const response = await attachmentRef.putString(attachment, \"data_url\");\r\n      attachmentUrl = await response.ref.getDownloadURL();\r\n    }\r\n    const nweetObj = {\r\n      text: nweet,\r\n      createdAt: Date.now(),\r\n      creatorId: userObj.uid,\r\n      attachmentUrl,\r\n    };\r\n\r\n    await dbService.collection(\"nweets\").add(nweetObj);\r\n    setNweet(\"\");\r\n    setAttachment(\"\");\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNweet(value);\r\n  };\r\n\r\n  // console.log(\"nweets\", nweets);\r\n\r\n  const onFileChange = (e) => {\r\n    const {\r\n      target: { files },\r\n    } = e;\r\n    const theFile = files[0];\r\n    const reader = new FileReader(); // FileReader API를 불러오는 방법\r\n    reader.onloadend = (finishedEvent) => {\r\n      const {\r\n        currentTarget: { result },\r\n      } = finishedEvent;\r\n      setAttachment(result);\r\n    };\r\n    if (Boolean(theFile)) {\r\n      reader.readAsDataURL(theFile);\r\n    }\r\n  };\r\n\r\n  const onClearAttachment = () => setAttachment(null);\r\n\r\n  return (\r\n    <form onSubmit={onSubmit} className=\"factoryForm\">\r\n      <div className=\"factoryInput__container\">\r\n        <input\r\n          className=\"factoryInput__input\"\r\n          value={nweet}\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          placeholder=\"What's on your mind?\"\r\n          maxLength={120}\r\n        />\r\n        <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\r\n      </div>\r\n      <label for=\"attach-file\" className=\"factoryInput__label\">\r\n        <span>Add photos</span>\r\n        <FontAwesomeIcon icon={faPlus} />\r\n      </label>\r\n      <input\r\n        id=\"attach-file\"\r\n        type=\"file\"\r\n        accept=\"image/*\"\r\n        onChange={onFileChange}\r\n        style={{\r\n          opacity: 0,\r\n        }}\r\n      />\r\n      {attachment && (\r\n        <div className=\"factoryForm__attachment\">\r\n          <img\r\n            src={attachment}\r\n            style={{\r\n              backgroundImage: attachment,\r\n            }}\r\n          />\r\n          <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\r\n            <span>Remove</span>\r\n            <FontAwesomeIcon icon={faTimes} />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default NweetFactory;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Nweet from \"components/Nweet\";\r\nimport { dbService } from \"fbase\";\r\nimport NweetFactory from \"components/NweetFactory\";\r\n\r\nconst Home = ({ userObj }) => {\r\n  const [nweets, setNweets] = useState([]);\r\n\r\n  /*\r\n\r\n  이 방법은 오래된 트윗을 갖고 오는 방법임. \r\n  새롭게 업데이트 되는걸 갖고 오는게 아니고.\r\n  그냥 아래 useEffect() 안에다가 바로 적을거야.\r\n\r\n  const getNweets = async () => {\r\n    const dbNweets = await dbService.collection(\"nweets\").get();\r\n    // console.log(dbNweets); 이렇게 얘를 갖고 오면 T라는 것을 갖고오는데 이건 querySnapChat이라는거고 그건 많은걸 갖고있지\r\n    // docs, empty, metadata,query, size, docChanges(), forEach(), isEqual()... 여기서 내가 원하는걸 갖고 오면 됨\r\n\r\n    dbNweets.forEach((document) => {\r\n      // console.log(document.data())\r\n      // forEach로 nweets(state)안에 있는 document.data를 가져오는거야.\r\n\r\n      const nweetObject = {\r\n        // 콘솔에 찍어보면 nweet: \"I am still hungry\", createdAt: 1627805238146, id: \"ukPtkFCdbYXzXsXXA4Qr\"\r\n        ...document.data(), // ... this is basically the content of the data.\r\n        id: document.id,\r\n      };\r\n      console.log(\"nweetObject!!\", nweetObject);\r\n\r\n      setNweets((prev) => [nweetObject, ...prev]);\r\n\r\n      console.log(\"data2\", document.data());\r\n      // set이 붙는 함수를 쓸때, 값 대신에 함수를 전달할 수 있다. 만약 함수를 전달하면, 리액트는 이전 값에 접근할수 있게 해준다 -dbNweets에 있는 모든 document에 대해서.\r\n      // 여기선 함수를 전달해서 배열을 리턴하는 것임. 첫번째 요소는 가장 최근 document이고 - document.data() 그 뒤로 이전 document(...prev)를 가져오는것임.\r\n    });\r\n  };\r\n\r\n  \r\n    1. dbService.collection(\"nweets\").get() 이렇게 해서 데이터를 가져오는 방법이나 - querySnapChat 사용\r\n        - forEach()를 해서 이걸 사용하면 새로고침해야지 새로운 데이터를 가져오는건가? 오래된 트윗만 가져오는거라고 했으니까\r\n        근데 snapshot를 하면 실시간이 가능!\r\n\r\n    2. 아래 useEffect() 에서 한것처럼 onSnapshot을 사용하거나 내 맘이야. 근데 이건 re-render안해도돼. 그래서 더 빠르게 실행되도록 만들어줄거야.\r\n        - 그리고 이건 리렌더링 안해도 되니까!!! 아 그래서 바로 실시간으로 가능하다는거구나\r\n\r\n\r\n\r\n\r\n  */\r\n\r\n  // Thanks to this we can tweet on realtime\r\n  useEffect(() => {\r\n    //getNweets();\r\n    dbService\r\n      .collection(\"nweets\")\r\n      .orderBy(\"createdAt\", \"desc\")\r\n      .onSnapshot((snapshot) => {\r\n        const nweetArray = snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          ...doc.data(),\r\n        }));\r\n        // console.log(\"nweetArray\", nweetArray);\r\n        // console.log(\"snapshot\", snapshot.docs); // 여기서 snapshot은 우리가 갖고 있는 쿼리랑 같음. t {_firestore: t, _delegate: t} 이렇게 뜨는거\r\n        setNweets(nweetArray);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <NweetFactory userObj={userObj} />\r\n      <div style={{ marginTop: 30 }}>\r\n        {nweets.map((nweet) => (\r\n          <Nweet\r\n            key={nweet.id}\r\n            nweetObj={nweet}\r\n            isOwner={nweet.creatorId === userObj.uid}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Home;\r\n","import { authService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default ({ userObj, refreshUser }) => {\r\n  const history = useHistory();\r\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n  const onLogOutClick = () => {\r\n    authService.signOut();\r\n    history.push(\"/\");\r\n    //  Router.js에서 <Redirect from=\"*\" to=\"/\" /> 이걸 이용하던가\r\n    // 여기서 훅을 이용해서 - useHistory() push해서 리다이렉트 해주던가\r\n  };\r\n\r\n  /*\r\n  // 이게 쿼리에 대한 코드\r\n  const getMyNweets = async () => {\r\n    const nweets = await dbService\r\n      .collection(\"nweets\")\r\n      .where(\"creatorId\", \"==\", userObj.uid) // 이게 where절 사용하는 방법. where 더 추가할수도 있음\r\n      .orderBy(\"createdAt\") // .orderBy(\"createdAt\", \"desc\") 이렇게 하면 desc근데 다시 index를 추가해야함. 인덱스 추가 안되어있으면 에러떠서  firestore에선 구글 클라우드에다가 인덱스를 추가해주면된다. 에러창에 뜬 주소로 가서 추가하면 됨.\r\n      .get();\r\n    console.log(nweets.docs.map((doc) => doc.data()));\r\n  };\r\n  useEffect(() => {\r\n    getMyNweets();\r\n  }, []);\r\n  */\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewDisplayName(value);\r\n  };\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (userObj.displayName !== newDisplayName) {\r\n      await userObj.updateProfile({\r\n        displayName: newDisplayName,\r\n      });\r\n      refreshUser();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <form onSubmit={onSubmit} className=\"profileForm\">\r\n        <input\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          autoFocus\r\n          placeholder=\"Display name\"\r\n          value={newDisplayName}\r\n          className=\"formInput\"\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Update Profile\"\r\n          className=\"formBtn\"\r\n          style={{\r\n            marginTop: 10,\r\n          }}\r\n        />\r\n      </form>\r\n      <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\r\n        Log Out\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Navigation = ({ userObj }) => {\r\n  return (\r\n    <nav>\r\n      <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\r\n        <li>\r\n          <Link to=\"/\" style={{ marginRight: 10 }}>\r\n            <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\r\n          </Link>\r\n        </li>\r\n        <li>\r\n          <Link\r\n            to=\"/profile\"\r\n            style={{\r\n              marginLeft: 10,\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              alignItems: \"center\",\r\n              fontSize: 12,\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\r\n            <span style={{ marginTop: 10 }}>\r\n              {userObj.displayName\r\n                ? `${userObj.displayName}'s Profile`\r\n                : \"Profile\"}\r\n            </span>\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Auth from \"routes/Auth\";\r\nimport Home from \"routes/Home\";\r\nimport Profile from \"routes/Profile\";\r\nimport Navigation from \"components/Navigation\";\r\n\r\nconst AppRouter = ({ refreshUser, isLoggedin, userObj }) => {\r\n  return (\r\n    <Router>\r\n      {isLoggedin && <Navigation userObj={userObj} />}\r\n      {/* isLoggedin - this has to be true, for <Navigation /> happend.  */}\r\n      <Switch>\r\n        {/* 여기서 <Switch>의 역할은 : 한번에 하나씩의 <Route>를 보게해준다.  */}\r\n        {isLoggedin ? (\r\n          <div\r\n            style={{\r\n              maxWidth: 890,\r\n              width: \"100%\",\r\n              margin: \"0 auto\",\r\n              marginTop: 80,\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            <Route exact path=\"/\">\r\n              <Home userObj={userObj} />\r\n            </Route>\r\n            <Route exact path=\"/profile\">\r\n              <Profile refreshUser={refreshUser} userObj={userObj} />\r\n            </Route>\r\n            {/* <Redirect from=\"*\" to=\"/\" /> */}\r\n          </div>\r\n        ) : (\r\n          <>\r\n            <Route exact path=\"/\">\r\n              <Auth />\r\n            </Route>\r\n            {/* \r\n            <Redirect from=\"*\" to=\"/\" />\r\n            이게 무슨뜻이냐면, 위에 route에 있으면 상관없는데 그 외의 route로 가게되면 여기 \"/\"로 돌아가라는 의미 */}\r\n          </>\r\n        )}\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default AppRouter;\r\n","import { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  // const [isLoggedin, setIsLoggedIn] = useState(false); // isLoggedin={isLoggedin} 이거를 isLoggedin={Boolean(userObj)} 이걸로 바꿔서 필요가 없어짐.\n  const [userObj, setUserObj] = useState(null);\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        // setIsLoggedIn(true);\n        //setUserObj(user); // 이렇게 몽땅 다 userObj에 set하는게 아니고 필요한거 몇개만해. 안그럼 big object가 되서 리액트가 렌더링할때 힘들어함\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        setUserObj(null); // profile에서 로그아웃하면 바로 로그인하는 창 나오게끔\n      }\n      setInit(true);\n    });\n  }, []);\n\n  const refreshUser = () => {\n    // setUserObj({ displayName: \"test\" }); 이렇게 하면 displayName에 test가 들어가는데. 왜 {} 이걸 써주지? -> 객체화 시킨거\n    console.log(authService.currentUser.displayName);\n    console.log(authService.currentUser); // big object가 출력된다. 너무 많아서 리액트가 뭘 렌더링해야하는지 몰라.\n    // setUserObj(authService.currentUser); // 그래서 이렇게 쓰면 바로 적용이 안돼. 뭘 렌더링 해야할지 몰라서!\n\n    const user = authService.currentUser;\n\n    // setUserObj(Object.assign({}, user)); //  이것도 가능하긴한데 에러가 날수도 있어...Unhandled Rejection (TypeError): userObj.updateProfile is not a function\n\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  };\n\n  return (\n    <>\n      {init ? (\n        <AppRouter\n          refreshUser={refreshUser}\n          isLoggedin={Boolean(userObj)}\n          userObj={userObj}\n        />\n      ) : (\n        \"Initializing...\"\n      )}\n      {/* <footer>&copy; {new Date().getFullYear()} Nwitter </footer> */}\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"components/App\";\nimport \"./styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}